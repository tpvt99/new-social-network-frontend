/* from underscore.js */
(function() {

    // Baseline setup
    //    --------------
    //
    //     // Establish the root object, `window` (`self`) in the browser, `global`
    //       // on the server, or `this` in some virtual machines. We use `self`
    //         // instead of `window` for `WebWorker` support.
    var root = typeof self == 'object' && self.self === self && self ||
              typeof global == 'object' && global.global === global && global ||
              this ||
              {};

    // Save the previous value of the `_` variable.
    var previousUnderscore = root._;

   // Save bytes in the minified (but not gzipped) version:
   var ArrayProto = Array.prototype, ObjProto = Object.prototype;
   var SymbolProto = typeof Symbol !== 'undefined' ? Symbol.prototype : null;

   // Create quick reference variables for speed access to core prototypes.
   var push = ArrayProto.push,
       slice = ArrayProto.slice,
       toString = ObjProto.toString,
       hasOwnProperty = ObjProto.hasOwnProperty;

   // All **ECMAScript 5** native function implementations that we hope to use
   // are declared here.
   var nativeIsArray = Array.isArray,
       nativeKeys = Object.keys,
       nativeCreate = Object.create;

   // Naked function reference for surrogate-prototype-swapping.
   var Ctor = function(){};

   // Create a safe reference to the Underscore object for use below.
   var _ = function(obj) {
   if (obj instanceof _) return obj;
   if (!(this instanceof _)) return new _(obj);
   this._wrapped = obj;
   };

   // Export the Underscore object for **Node.js**, with
   // backwards-compatibility for their old module API. If we're in
   // the browser, add `_` as a global object.
   // (`nodeType` is checked to ensure that `module`
//                                                                                                                                 // and `exports` are not HTML elements.)
//                                                                                                                                   if (typeof exports != 'undefined' && !exports.nodeType) {
//                                                                                                                                       if (typeof module != 'undefined' && !module.nodeType && module.exports) {
//                                                                                                                                             exports = module.exports = _;
//                                                                                                                                                 }
//                                                                                                                                                     exports._ = _;
//                                                                                                                                                       } else {
//                                                                                                                                                           root._ = _;
//                                                                                                                                                             }
//
//                                                                                                                                                               // Current version.
//                                                                                                                                                                 _.VERSION = '1.8.3';
//
//                                                                                                                                                                   // Internal function that returns an efficient (for current engines) version
//                                                                                                                                                                     // of the passed-in callback, to be repeatedly applied in other Underscore
//                                                                                                                                                                       // functions.
//                                                                                                                                                                         var optimizeCb = function(func, context, argCount) {
//                                                                                                                                                                             if (context === void 0) return func;
//                                                                                                                                                                                 switch (argCount) {
//                                                                                                                                                                                       case 1: return function(value) {
//                                                                                                                                                                                               return func.call(context, value);
//                                                                                                                                                                                                     };
//                                                                                                                                                                                                           // The 2-parameter case has been omitted only because no current consumers
//                                                                                                                                                                                                                 // made use of it.
//                                                                                                                                                                                                                       case null:
//                                                                                                                                                                                                                             case 3: return function(value, index, collection) {
//                                                                                                                                                                                                                                     return func.call(context, value, index, collection);
//                                                                                                                                                                                                                                           };
//                                                                                                                                                                                                                                                 case 4: return function(accumulator, value, index, collection) {
//                                                                                                                                                                                                                                                         return func.call(context, accumulator, value, index, collection);
//                                                                                                                                                                                                                                                               };
//                                                                                                                                                                                                                                                                   }
//                                                                                                                                                                                                                                                                       return function() {
//                                                                                                                                                                                                                                                                             return func.apply(context, arguments);
//                                                                                                                                                                                                                                                                                 };
//                                                                                                                                                                                                                                                                                   };
//
//                                                                                                                                                                                                                                                                                     var builtinIteratee;
//
//                                                                                                                                                                                                                                                                                       // An internal function to generate callbacks that can be applied to each
//                                                                                                                                                                                                                                                                                         // element in a collection, returning the desired result — either `identity`,
//                                                                                                                                                                                                                                                                                           // an arbitrary callback, a property matcher, or a property accessor.
//                                                                                                                                                                                                                                                                                             var cb = function(value, context, argCount) {
//                                                                                                                                                                                                                                                                                                 if (_.iteratee !== builtinIteratee) return _.iteratee(value, context);
//                                                                                                                                                                                                                                                                                                     if (value == null) return _.identity;
//                                                                                                                                                                                                                                                                                                         if (_.isFunction(value)) return optimizeCb(value, context, argCount);
//                                                                                                                                                                                                                                                                                                             if (_.isObject(value) && !_.isArray(value)) return _.matcher(value);
//                                                                                                                                                                                                                                                                                                                 return _.property(value);
//                                                                                                                                                                                                                                                                                                                   };
//
//                                                                                                                                                                                                                                                                                                                     // External wrapper for our callback generator. Users may customize
//                                                                                                                                                                                                                                                                                                                       // `_.iteratee` if they want additional predicate/iteratee shorthand styles.
//                                                                                                                                                                                                                                                                                                                         // This abstraction hides the internal-only argCount argument.
//                                                                                                                                                                                                                                                                                                                           _.iteratee = builtinIteratee = function(value, context) {
//                                                                                                                                                                                                                                                                                                                               return cb(value, context, Infinity);
//                                                                                                                                                                                                                                                                                                                                 };
//
//                                                                                                                                                                                                                                                                                                                                   // Similar to ES6's rest param (http://ariya.ofilabs.com/2013/03/es6-and-rest-parameter.html)
//                                                                                                                                                                                                                                                                                                                                     // This accumulates the arguments passed into an array, after a given index.
//                                                                                                                                                                                                                                                                                                                                       var restArgs = function(func, startIndex) {
//                                                                                                                                                                                                                                                                                                                                           startIndex = startIndex == null ? func.length - 1 : +startIndex;
//                                                                                                                                                                                                                                                                                                                                               return function() {
//                                                                                                                                                                                                                                                                                                                                                     var length = Math.max(arguments.length - startIndex, 0),
//                                                                                                                                                                                                                                                                                                                                                               rest = Array(length),
//                                                                                                                                                                                                                                                                                                                                                                         index = 0;
//                                                                                                                                                                                                                                                                                                                                                                               for (; index < length; index++) {
//                                                                                                                                                                                                                                                                                                                                                                                       rest[index] = arguments[index + startIndex];
//                                                                                                                                                                                                                                                                                                                                                                                             }
//                                                                                                                                                                                                                                                                                                                                                                                                   switch (startIndex) {
//                                                                                                                                                                                                                                                                                                                                                                                                           case 0: return func.call(this, rest);
//                                                                                                                                                                                                                                                                                                                                                                                                                   case 1: return func.call(this, arguments[0], rest);
//                                                                                                                                                                                                                                                                                                                                                                                                                           case 2: return func.call(this, arguments[0], arguments[1], rest);
//                                                                                                                                                                                                                                                                                                                                                                                                                                 }
//                                                                                                                                                                                                                                                                                                                                                                                                                                       var args = Array(startIndex + 1);
//                                                                                                                                                                                                                                                                                                                                                                                                                                             for (index = 0; index < startIndex; index++) {
//                                                                                                                                                                                                                                                                                                                                                                                                                                                     args[index] = arguments[index];
//                                                                                                                                                                                                                                                                                                                                                                                                                                                           }
//                                                                                                                                                                                                                                                                                                                                                                                                                                                                 args[startIndex] = rest;
//                                                                                                                                                                                                                                                                                                                                                                                                                                                                       return func.apply(this, args);
//                                                                                                                                                                                                                                                                                                                                                                                                                                                                           };
//                                                                                                                                                                                                                                                                                                                                                                                                                                                                             };
//
//                                                                                                                                                                                                                                                                                                                                                                                                                                                                               // An internal function for creating a new object that inherits from another.
//                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 var baseCreate = function(prototype) {
//                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     if (!_.isObject(prototype)) return {};
//                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         if (nativeCreate) return nativeCreate(prototype);
//                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             Ctor.prototype = prototype;
//                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 var result = new Ctor;
//                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     Ctor.prototype = null;
//                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         return result;
//                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           };
//
//                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             var shallowProperty = function(key) {
//                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 return function(obj) {
return obj == null ? void 0 : obj[key];
};
};
//
var deepGet = function(obj, path) {
var length = path.length;
for (var i = 0; i < length; i++) {
if (obj == null) return void 0;
obj = obj[path[i]];
}
//                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           return length ? obj : void 0;
};
//
elper for collection methods to determine whether a collection
should be iterated as an array or as an object.
elated: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-tolength
voids a very nasty iOS 8 JIT bug on ARM-64. #2094
var MAX_ARRAY_INDEX = Math.pow(2, 53) - 1;
var getLength = shallowProperty('length');
var isArrayLike = function(collection) {
var length = getLength(collection);
return typeof length == 'number' && length >= 0 && length <= MAX_ARRAY_INDEX;
};




  _.debounce = function(func, wait, immediate) {
    var timeout, result;

    var later = function(context, args) {
      timeout = null;
      if (args) result = func.apply(context, args);
    };

    var debounced = restArgs(function(args) {
      if (timeout) clearTimeout(timeout);
      if (immediate) {
        var callNow = !timeout;
        timeout = setTimeout(later, wait);
        if (callNow) result = func.apply(this, args);
      } else {
        timeout = _.delay(later, wait, this, args);
      }

      return result;
      });

      debounced.cancel = function() {
        clearTimeout(timeout);
        timeout = null;
      };

    return debounced;
  };
}
